/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { Angular4PaystackService } from './angular4-paystack.service';
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
export class Angular4PaystackEmbedComponent {
    // tslint:disable-line
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter();
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.callback.emit(...response);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            console.error('ANGULAR-PAYSTACK: The paystack embed option is deprecated. Please use the paystack component or directive');
            this.pay();
        });
    }
}
Angular4PaystackEmbedComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular4-paystack-embed',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `<div id="paystackEmbedContainer"></div>`
            }] }
];
/** @nocollapse */
Angular4PaystackEmbedComponent.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackEmbedComponent.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    channels: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    subaccount: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.key;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.email;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.amount;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.metadata;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.channels;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.ref;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.currency;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.plan;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.quantity;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.bearer;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.onClose;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.callback;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackEmbedComponent.prototype.paystackService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2stZW1iZWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjQtcGF5c3RhY2svIiwic291cmNlcyI6WyJsaWIvYW5ndWxhcjQtcGF5c3RhY2stZW1iZWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQUV0RSx1QkFFQzs7O0lBREMsK0JBQWlCOztBQVVuQixNQUFNLE9BQU8sOEJBQThCOzs7OztJQW1CekMsWUFBb0IsZUFBd0M7UUFBeEMsb0JBQWUsR0FBZixlQUFlLENBQXlCO1FBTGxELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFDekQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsc0JBQXNCOztRQUM1RSxhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFHRCxDQUFDOzs7O0lBRTFELEdBQUc7OztnQkFDSCxTQUFTLEdBQUcsRUFBRTtZQUNsQixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDekUsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtZQUNELElBQUksU0FBUyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBQ0QsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3pCOztrQkFDSyxPQUFPLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1lBQy9ELE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN2QixDQUFDO0tBQUE7Ozs7O0lBRUQsWUFBWSxDQUFDLEdBQW9CO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDbkMsT0FBTyxtSEFBbUgsQ0FBQztTQUM1SDtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsR0FBb0I7UUFDbEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU87OztRQUFHLEdBQUcsRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNyQjtRQUNILENBQUMsQ0FBQSxDQUFDO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVE7Ozs7UUFBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7Ozs7SUFFSyxRQUFROztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQ1gsMkdBQTJHLENBQzVHLENBQUM7WUFDRixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDYixDQUFDO0tBQUE7OztZQXhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSx5Q0FBeUM7YUFDcEQ7Ozs7WUFYUSx1QkFBdUI7OztrQkFjN0IsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO2tCQUNMLEtBQUs7dUJBQ0wsS0FBSzttQkFDTCxLQUFLO3VCQUNMLEtBQUs7eUJBQ0wsS0FBSztpQ0FDTCxLQUFLO3FCQUNMLEtBQUs7OEJBQ0wsS0FBSzswQkFDTCxNQUFNO3NCQUNOLE1BQU07dUJBQ04sTUFBTTs7OztJQWZQLDZDQUFxQjs7SUFDckIsK0NBQXVCOztJQUN2QixnREFBd0I7O0lBQ3hCLGtEQUFzQjs7SUFDdEIsa0RBQTRCOztJQUM1Qiw2Q0FBcUI7O0lBQ3JCLGtEQUEwQjs7SUFDMUIsOENBQXNCOztJQUN0QixrREFBMEI7O0lBQzFCLG9EQUE0Qjs7SUFDNUIsNERBQW9DOztJQUNwQyxnREFBd0I7O0lBQ3hCLHlEQUEwQzs7SUFDMUMscURBQW1FOztJQUNuRSxpREFBK0Q7O0lBQy9ELGtEQUFnRTs7SUFDaEUsMERBQXlEOzs7OztJQUU3Qyx5REFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGF5c3RhY2tPcHRpb25zLCBQcml2YXRlUGF5c3RhY2tPcHRpb25zIH0gZnJvbSAnLi9wYXlzdGFjay1vcHRpb25zJztcbmltcG9ydCB7IEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlIH0gZnJvbSAnLi9hbmd1bGFyNC1wYXlzdGFjay5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIE15V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgUGF5c3RhY2tQb3A6IGFueTtcbn1cbmRlY2xhcmUgdmFyIHdpbmRvdzogUGFydGlhbDxNeVdpbmRvdz47XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FuZ3VsYXI0LXBheXN0YWNrLWVtYmVkJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiBgPGRpdiBpZD1cInBheXN0YWNrRW1iZWRDb250YWluZXJcIj48L2Rpdj5gXG59KVxuXG5leHBvcnQgY2xhc3MgQW5ndWxhcjRQYXlzdGFja0VtYmVkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkga2V5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGVtYWlsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFtb3VudDogbnVtYmVyO1xuICBASW5wdXQoKSBtZXRhZGF0YToge307XG4gIEBJbnB1dCgpIGNoYW5uZWxzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgcmVmOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1cnJlbmN5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYW46IHN0cmluZztcbiAgQElucHV0KCkgcXVhbnRpdHk6IHN0cmluZztcbiAgQElucHV0KCkgc3ViYWNjb3VudDogc3RyaW5nO1xuICBASW5wdXQoKSB0cmFuc2FjdGlvbl9jaGFyZ2U6IG51bWJlcjsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuICBASW5wdXQoKSBiZWFyZXI6IHN0cmluZztcbiAgQElucHV0KCkgcGF5c3RhY2tPcHRpb25zOiBQYXlzdGFja09wdGlvbnM7XG4gIEBPdXRwdXQoKSBwYXltZW50SW5pdDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQE91dHB1dCgpIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBwdWJsaWMgX3BheXN0YWNrT3B0aW9uczogUGFydGlhbDxQcml2YXRlUGF5c3RhY2tPcHRpb25zPjsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5c3RhY2tTZXJ2aWNlOiBBbmd1bGFyNFBheXN0YWNrU2VydmljZSkge31cblxuICBhc3luYyBwYXkoKSB7XG4gICAgbGV0IGVycm9yVGV4dCA9ICcnO1xuICAgIGlmICh0aGlzLnBheXN0YWNrT3B0aW9ucyAmJiBPYmplY3Qua2V5cyh0aGlzLnBheXN0YWNrT3B0aW9ucykubGVuZ3RoID49IDIpIHtcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25zKHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JUZXh0ID0gdGhpcy52YWxkYXRlSW5wdXQodGhpcyk7XG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucyh0aGlzKTtcbiAgICB9XG4gICAgaWYgKGVycm9yVGV4dCkge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvclRleHQpO1xuICAgICAgcmV0dXJuIGVycm9yVGV4dDtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5wYXlzdGFja1NlcnZpY2UubG9hZFNjcmlwdCgpO1xuICAgIGlmICh0aGlzLnBheW1lbnRJbml0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucGF5bWVudEluaXQuZW1pdCgpO1xuICAgIH1cbiAgICBjb25zdCBwYXltZW50ID0gd2luZG93LlBheXN0YWNrUG9wLnNldHVwKHRoaXMuX3BheXN0YWNrT3B0aW9ucyk7XG4gICAgcGF5bWVudC5vcGVuSWZyYW1lKCk7XG4gIH1cblxuICB2YWxkYXRlSW5wdXQob2JqOiBQYXlzdGFja09wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuY2FsbGJhY2sub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBJbnNlcnQgYSBjYWxsYmFjayBvdXRwdXQgbGlrZSBzbyAoY2FsbGJhY2spPVxcJ1BheW1lbnRDb21wbGV0ZSgkZXZlbnQpXFwnIHRvIGNoZWNrIHBheW1lbnQgc3RhdHVzJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGF5c3RhY2tTZXJ2aWNlLmNoZWNrSW5wdXQob2JqKTtcbiAgfVxuXG4gIGdlbmVyYXRlT3B0aW9ucyhvYmo6IFBheXN0YWNrT3B0aW9ucykge1xuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucyA9IHRoaXMucGF5c3RhY2tTZXJ2aWNlLmdldFBheXN0YWNrT3B0aW9ucyhvYmopO1xuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucy5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub25DbG9zZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMub25DbG9zZS5lbWl0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMuY2FsbGJhY2sgPSAoLi4ucmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMuY2FsbGJhY2suZW1pdCguLi5yZXNwb25zZSk7XG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAnQU5HVUxBUi1QQVlTVEFDSzogVGhlIHBheXN0YWNrIGVtYmVkIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRoZSBwYXlzdGFjayBjb21wb25lbnQgb3IgZGlyZWN0aXZlJ1xuICAgICk7XG4gICAgdGhpcy5wYXkoKTtcbiAgfVxuXG59XG4iXX0=