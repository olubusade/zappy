/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { Angular4PaystackService } from './angular4-paystack.service';
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
export class Angular4PaystackDirective {
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
        // tslint:disable-line
        this.isPaying = false;
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.isPaying) {
                return;
            }
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
            this.isPaying = true;
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.callback.emit(...response);
        });
    }
    /**
     * @return {?}
     */
    buttonClick() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.pay();
        });
    }
}
Angular4PaystackDirective.decorators = [
    { type: Directive, args: [{
                selector: '[angular4-paystack]',
            },] }
];
/** @nocollapse */
Angular4PaystackDirective.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackDirective.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    subaccount: [{ type: Input }],
    channels: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }],
    buttonClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    Angular4PaystackDirective.prototype.key;
    /** @type {?} */
    Angular4PaystackDirective.prototype.email;
    /** @type {?} */
    Angular4PaystackDirective.prototype.amount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.metadata;
    /** @type {?} */
    Angular4PaystackDirective.prototype.ref;
    /** @type {?} */
    Angular4PaystackDirective.prototype.currency;
    /** @type {?} */
    Angular4PaystackDirective.prototype.plan;
    /** @type {?} */
    Angular4PaystackDirective.prototype.quantity;
    /** @type {?} */
    Angular4PaystackDirective.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.channels;
    /** @type {?} */
    Angular4PaystackDirective.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackDirective.prototype.bearer;
    /** @type {?} */
    Angular4PaystackDirective.prototype.class;
    /** @type {?} */
    Angular4PaystackDirective.prototype.style;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackDirective.prototype.onClose;
    /** @type {?} */
    Angular4PaystackDirective.prototype.callback;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.isPaying;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.paystackService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjQtcGF5c3RhY2svIiwic291cmNlcyI6WyJsaWIvYW5ndWxhcjQtcGF5c3RhY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7Ozs7QUFFdEUsdUJBSUM7OztJQUhDLCtCQUVFOztBQU9KLE1BQU0sT0FBTyx5QkFBeUI7Ozs7SUFzQnBDLFlBQW9CLGVBQXdDO1FBQXhDLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtRQU5sRCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsc0JBQXNCOztRQUNoRixZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUMsQ0FBQyxzQkFBc0I7O1FBQzVFLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7UUFFeEQsYUFBUSxHQUFHLEtBQUssQ0FBQztJQUVzQyxDQUFDOzs7O0lBRTFELEdBQUc7OztnQkFDSCxTQUFTLEdBQUcsRUFBRTtZQUNsQixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDekUsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtZQUNELElBQUksU0FBUyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBQ0QsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFBRSxPQUFPO2FBQUU7WUFDOUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDekI7O2tCQUNLLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDL0QsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLENBQUM7S0FBQTs7Ozs7SUFFRCxZQUFZLENBQUMsR0FBb0I7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNuQyxPQUFPLG1IQUFtSCxDQUFDO1NBQzVIO1FBQ0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxHQUFvQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTzs7O1FBQUcsR0FBRyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQyxDQUFBLENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUTs7OztRQUFHLENBQUMsR0FBRyxRQUFRLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQSxDQUFDO0lBQ0osQ0FBQzs7OztJQUdLLFdBQVc7O1lBQ2YsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2IsQ0FBQztLQUFBOzs7WUF4RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7YUFDaEM7Ozs7WUFYUSx1QkFBdUI7OztrQkFhN0IsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUs7dUJBQ0wsS0FBSztrQkFDTCxLQUFLO3VCQUNMLEtBQUs7bUJBQ0wsS0FBSzt1QkFDTCxLQUFLO3lCQUNMLEtBQUs7dUJBQ0wsS0FBSztpQ0FDTCxLQUFLO3FCQUNMLEtBQUs7b0JBQ0wsS0FBSztvQkFDTCxLQUFLOzhCQUNMLEtBQUs7MEJBQ0wsTUFBTTtzQkFDTixNQUFNO3VCQUNOLE1BQU07MEJBZ0ROLFlBQVksU0FBQyxPQUFPOzs7O0lBakVyQix3Q0FBcUI7O0lBQ3JCLDBDQUF1Qjs7SUFDdkIsMkNBQXdCOztJQUN4Qiw2Q0FBc0I7O0lBQ3RCLHdDQUFxQjs7SUFDckIsNkNBQTBCOztJQUMxQix5Q0FBc0I7O0lBQ3RCLDZDQUEwQjs7SUFDMUIsK0NBQTRCOztJQUM1Qiw2Q0FBNEI7O0lBQzVCLHVEQUFvQzs7SUFDcEMsMkNBQXdCOztJQUN4QiwwQ0FBdUI7O0lBQ3ZCLDBDQUF1Qjs7SUFDdkIsb0RBQTBDOztJQUMxQyxnREFBbUU7O0lBQ25FLDRDQUErRDs7SUFDL0QsNkNBQWdFOzs7OztJQUNoRSxxREFBMEQ7Ozs7O0lBQzFELDZDQUF5Qjs7Ozs7SUFFYixvREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYXlzdGFja09wdGlvbnMsIFByaXZhdGVQYXlzdGFja09wdGlvbnMgfSBmcm9tICcuL3BheXN0YWNrLW9wdGlvbnMnO1xuaW1wb3J0IHsgQW5ndWxhcjRQYXlzdGFja1NlcnZpY2UgfSBmcm9tICcuL2FuZ3VsYXI0LXBheXN0YWNrLnNlcnZpY2UnO1xuXG5pbnRlcmZhY2UgTXlXaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xuICBQYXlzdGFja1BvcDoge1xuICAgIHNldHVwKG9wdGlvbnM6IFBhcnRpYWw8UGF5c3RhY2tPcHRpb25zPik6IHsgb3BlbklmcmFtZSgpOiBhbnkgfVxuICB9O1xufVxuZGVjbGFyZSB2YXIgd2luZG93OiBNeVdpbmRvdztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2FuZ3VsYXI0LXBheXN0YWNrXScsIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhcjRQYXlzdGFja0RpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIGtleTogc3RyaW5nO1xuICBASW5wdXQoKSBlbWFpbDogc3RyaW5nO1xuICBASW5wdXQoKSBhbW91bnQ6IG51bWJlcjtcbiAgQElucHV0KCkgbWV0YWRhdGE6IHt9O1xuICBASW5wdXQoKSByZWY6IHN0cmluZztcbiAgQElucHV0KCkgY3VycmVuY3k6IHN0cmluZztcbiAgQElucHV0KCkgcGxhbjogc3RyaW5nO1xuICBASW5wdXQoKSBxdWFudGl0eTogc3RyaW5nO1xuICBASW5wdXQoKSBzdWJhY2NvdW50OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNoYW5uZWxzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgdHJhbnNhY3Rpb25fY2hhcmdlOiBudW1iZXI7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQElucHV0KCkgYmVhcmVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0eWxlOiBvYmplY3Q7XG4gIEBJbnB1dCgpIHBheXN0YWNrT3B0aW9uczogUGF5c3RhY2tPcHRpb25zO1xuICBAT3V0cHV0KCkgcGF5bWVudEluaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQE91dHB1dCgpIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBwcml2YXRlIF9wYXlzdGFja09wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVBheXN0YWNrT3B0aW9ucz47IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgcHJpdmF0ZSBpc1BheWluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5c3RhY2tTZXJ2aWNlOiBBbmd1bGFyNFBheXN0YWNrU2VydmljZSkge31cblxuICBhc3luYyBwYXkoKSB7XG4gICAgbGV0IGVycm9yVGV4dCA9ICcnO1xuICAgIGlmICh0aGlzLnBheXN0YWNrT3B0aW9ucyAmJiBPYmplY3Qua2V5cyh0aGlzLnBheXN0YWNrT3B0aW9ucykubGVuZ3RoID49IDIpIHtcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25zKHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JUZXh0ID0gdGhpcy52YWxkYXRlSW5wdXQodGhpcyk7XG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucyh0aGlzKTtcbiAgICB9XG4gICAgaWYgKGVycm9yVGV4dCkge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvclRleHQpO1xuICAgICAgcmV0dXJuIGVycm9yVGV4dDtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5wYXlzdGFja1NlcnZpY2UubG9hZFNjcmlwdCgpO1xuICAgIGlmICh0aGlzLmlzUGF5aW5nKSB7IHJldHVybjsgfVxuICAgIGlmICh0aGlzLnBheW1lbnRJbml0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucGF5bWVudEluaXQuZW1pdCgpO1xuICAgIH1cbiAgICBjb25zdCBwYXltZW50ID0gd2luZG93LlBheXN0YWNrUG9wLnNldHVwKHRoaXMuX3BheXN0YWNrT3B0aW9ucyk7XG4gICAgcGF5bWVudC5vcGVuSWZyYW1lKCk7XG4gICAgdGhpcy5pc1BheWluZyA9IHRydWU7XG4gIH1cblxuICB2YWxkYXRlSW5wdXQob2JqOiBQYXlzdGFja09wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuY2FsbGJhY2sub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBJbnNlcnQgYSBjYWxsYmFjayBvdXRwdXQgbGlrZSBzbyAoY2FsbGJhY2spPVxcJ1BheW1lbnRDb21wbGV0ZSgkZXZlbnQpXFwnIHRvIGNoZWNrIHBheW1lbnQgc3RhdHVzJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGF5c3RhY2tTZXJ2aWNlLmNoZWNrSW5wdXQob2JqKTtcbiAgfVxuXG4gIGdlbmVyYXRlT3B0aW9ucyhvYmo6IFBheXN0YWNrT3B0aW9ucykge1xuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucyA9IHRoaXMucGF5c3RhY2tTZXJ2aWNlLmdldFBheXN0YWNrT3B0aW9ucyhvYmopO1xuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucy5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub25DbG9zZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMub25DbG9zZS5lbWl0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMuY2FsbGJhY2sgPSAoLi4ucmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMuY2FsbGJhY2suZW1pdCguLi5yZXNwb25zZSk7XG4gICAgfTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgYXN5bmMgYnV0dG9uQ2xpY2soKSB7XG4gICAgdGhpcy5wYXkoKTtcbiAgfVxufVxuIl19