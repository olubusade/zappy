/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function PaystackOptions() { }
if (false) {
    /**
     * Amount to withdraw (in kobo for NGN)
     * @type {?}
     */
    PaystackOptions.prototype.amount;
    /**
     * A flat fee to charge the subaccount for this transaction, in kobo.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.transaction_charge;
    /**
     * Your pubic Key from Paystack. Use test key for test mode and live key for live mode
     * @type {?|undefined}
     */
    PaystackOptions.prototype.key;
    /**
     * The customer's email address
     * @type {?}
     */
    PaystackOptions.prototype.email;
    /**
     * Unique case sensitive transaction reference. Only -,., = and alphanumeric characters allowed.
     * @type {?}
     */
    PaystackOptions.prototype.ref;
    /**
     * custom details
     * eg `{date: 12-05-2020}`
     * @type {?|undefined}
     */
    PaystackOptions.prototype.metadata;
    /**
     * Transaction currency
     * Default `NGN`
     * @type {?|undefined}
     */
    PaystackOptions.prototype.currency;
    /**
     * If transaction is to create a subscription to a predefined plan, provide plan code here.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.plan;
    /**
     * Used to apply a multiple to the amount returned by the plan code above.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.quantity;
    /**
     * The code for the subaccount that owns the payment.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.subaccount;
    /**
     * Who bears Paystack charges? account or subaccount
     * @type {?|undefined}
     */
    PaystackOptions.prototype.bearer;
    /**
     * Send 'card' or 'bank' or 'card','bank' as an array to specify what options to show the user paying
     * @type {?|undefined}
     */
    PaystackOptions.prototype.channels;
}
/**
 * @record
 */
export function PrivatePaystackOptions() { }
if (false) {
    /**
     * A function to be called on successful card charge. User’s can always be redirected to a successful or
     * failed page supplied by the merchant here based on response
     * \@param response?: The server response
     * @type {?}
     */
    PrivatePaystackOptions.prototype.callback;
    /**
     * A function to be called when the pay modal is closed.
     * @type {?}
     */
    PrivatePaystackOptions.prototype.onClose;
    /**
     * A function to be called when payment is about to begin
     * @type {?}
     */
    PrivatePaystackOptions.prototype.init;
}
/**
 * @record
 */
export function PrivatePaystackOptionsWithEmitters() { }
if (false) {
    /**
     * A function to be called on successful card charge. User’s can always be redirected to a successful or
     * failed page supplied by the merchant here based on response
     * @type {?}
     */
    PrivatePaystackOptionsWithEmitters.prototype.callback;
    /**
     * A function to be called when the pay modal is closed.
     * @type {?}
     */
    PrivatePaystackOptionsWithEmitters.prototype.onClose;
    /**
     * A function to be called when payment is about to begin
     * @type {?}
     */
    PrivatePaystackOptionsWithEmitters.prototype.init;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5c3RhY2stb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXI0LXBheXN0YWNrLyIsInNvdXJjZXMiOlsibGliL3BheXN0YWNrLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLHFDQW1EQzs7Ozs7O0lBL0NDLGlDQUFlOzs7OztJQUlmLDZDQUE0Qjs7Ozs7SUFJNUIsOEJBQWE7Ozs7O0lBSWIsZ0NBQWM7Ozs7O0lBSWQsOEJBQVk7Ozs7OztJQUtaLG1DQUFjOzs7Ozs7SUFLZCxtQ0FBa0I7Ozs7O0lBSWxCLCtCQUFjOzs7OztJQUlkLG1DQUFrQjs7Ozs7SUFJbEIscUNBQW9COzs7OztJQUlwQixpQ0FBZ0I7Ozs7O0lBSWhCLG1DQUFvQjs7Ozs7QUFHdEIsNENBZUM7Ozs7Ozs7O0lBVEMsMENBQW1DOzs7OztJQUluQyx5Q0FBb0I7Ozs7O0lBSXBCLHNDQUFpQjs7Ozs7QUFHbkIsd0RBY0M7Ozs7Ozs7SUFUQyxzREFBNEI7Ozs7O0lBSTVCLHFEQUE0Qjs7Ozs7SUFJNUIsa0RBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5c3RhY2tPcHRpb25zIHtcbiAgLyoqXG4gICAqIEFtb3VudCB0byB3aXRoZHJhdyAoaW4ga29ibyBmb3IgTkdOKVxuICAgKi9cbiAgYW1vdW50OiBudW1iZXI7XG4gIC8qKlxuICAgKiBBIGZsYXQgZmVlIHRvIGNoYXJnZSB0aGUgc3ViYWNjb3VudCBmb3IgdGhpcyB0cmFuc2FjdGlvbiwgaW4ga29iby5cbiAgICovXG4gIHRyYW5zYWN0aW9uX2NoYXJnZT86IG51bWJlcjtcbiAgLyoqXG4gICAqIFlvdXIgcHViaWMgS2V5IGZyb20gUGF5c3RhY2suIFVzZSB0ZXN0IGtleSBmb3IgdGVzdCBtb2RlIGFuZCBsaXZlIGtleSBmb3IgbGl2ZSBtb2RlXG4gICAqL1xuICBrZXk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY3VzdG9tZXIncyBlbWFpbCBhZGRyZXNzXG4gICAqL1xuICBlbWFpbDogc3RyaW5nO1xuICAvKipcbiAgICogVW5pcXVlIGNhc2Ugc2Vuc2l0aXZlIHRyYW5zYWN0aW9uIHJlZmVyZW5jZS4gT25seSAtLC4sID0gYW5kIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGFsbG93ZWQuXG4gICAqL1xuICByZWY6IHN0cmluZztcbiAgLyoqXG4gICAqIGN1c3RvbSBkZXRhaWxzXG4gICAqIGVnIGB7ZGF0ZTogMTItMDUtMjAyMH1gXG4gICAqL1xuICBtZXRhZGF0YT86IHt9O1xuICAvKipcbiAgICogVHJhbnNhY3Rpb24gY3VycmVuY3lcbiAgICogRGVmYXVsdCBgTkdOYFxuICAgKi9cbiAgY3VycmVuY3k/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZiB0cmFuc2FjdGlvbiBpcyB0byBjcmVhdGUgYSBzdWJzY3JpcHRpb24gdG8gYSBwcmVkZWZpbmVkIHBsYW4sIHByb3ZpZGUgcGxhbiBjb2RlIGhlcmUuXG4gICAqL1xuICBwbGFuPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlZCB0byBhcHBseSBhIG11bHRpcGxlIHRvIHRoZSBhbW91bnQgcmV0dXJuZWQgYnkgdGhlIHBsYW4gY29kZSBhYm92ZS5cbiAgICovXG4gIHF1YW50aXR5Pzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNvZGUgZm9yIHRoZSBzdWJhY2NvdW50IHRoYXQgb3ducyB0aGUgcGF5bWVudC5cbiAgICovXG4gIHN1YmFjY291bnQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaG8gYmVhcnMgUGF5c3RhY2sgY2hhcmdlcz8gYWNjb3VudCBvciBzdWJhY2NvdW50XG4gICAqL1xuICBiZWFyZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTZW5kICdjYXJkJyBvciAnYmFuaycgb3IgJ2NhcmQnLCdiYW5rJyBhcyBhbiBhcnJheSB0byBzcGVjaWZ5IHdoYXQgb3B0aW9ucyB0byBzaG93IHRoZSB1c2VyIHBheWluZ1xuICAgKi9cbiAgY2hhbm5lbHM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcml2YXRlUGF5c3RhY2tPcHRpb25zIGV4dGVuZHMgUGF5c3RhY2tPcHRpb25zIHtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3NmdWwgY2FyZCBjaGFyZ2UuIFVzZXLigJlzIGNhbiBhbHdheXMgYmUgcmVkaXJlY3RlZCB0byBhIHN1Y2Nlc3NmdWwgb3JcbiAgICogZmFpbGVkIHBhZ2Ugc3VwcGxpZWQgYnkgdGhlIG1lcmNoYW50IGhlcmUgYmFzZWQgb24gcmVzcG9uc2VcbiAgICogQHBhcmFtIHJlc3BvbnNlPzogVGhlIHNlcnZlciByZXNwb25zZVxuICAgKi9cbiAgY2FsbGJhY2s6IChyZXNwb25zZT86IGFueSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHBheSBtb2RhbCBpcyBjbG9zZWQuXG4gICAqL1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBwYXltZW50IGlzIGFib3V0IHRvIGJlZ2luXG4gICAqL1xuICBpbml0OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByaXZhdGVQYXlzdGFja09wdGlvbnNXaXRoRW1pdHRlcnMgZXh0ZW5kcyBQYXlzdGFja09wdGlvbnMge1xuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gc3VjY2Vzc2Z1bCBjYXJkIGNoYXJnZS4gVXNlcuKAmXMgY2FuIGFsd2F5cyBiZSByZWRpcmVjdGVkIHRvIGEgc3VjY2Vzc2Z1bCBvclxuICAgKiBmYWlsZWQgcGFnZSBzdXBwbGllZCBieSB0aGUgbWVyY2hhbnQgaGVyZSBiYXNlZCBvbiByZXNwb25zZVxuICAgKi9cbiAgY2FsbGJhY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcGF5IG1vZGFsIGlzIGNsb3NlZC5cbiAgICovXG4gIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gcGF5bWVudCBpcyBhYm91dCB0byBiZWdpblxuICAgKi9cbiAgaW5pdDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xufVxuIl19