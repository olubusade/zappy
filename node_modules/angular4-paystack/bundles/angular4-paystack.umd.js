(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular4-paystack', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['angular4-paystack'] = {}, global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PUBLIC_KEY_TOKEN = new core.InjectionToken('paystack.publickey');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function MyWindow() { }
    if (false) {
        /** @type {?} */
        MyWindow.prototype.PaystackPop;
    }
    var Angular4PaystackService = /** @class */ (function () {
        function Angular4PaystackService(token) {
            this.token = token;
        }
        /**
         * @return {?}
         */
        Angular4PaystackService.prototype.loadScript = /**
         * @return {?}
         */
        function () {
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) {
                if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {
                    resolve();
                    return;
                }
                /** @type {?} */
                var script = window.document.createElement('script');
                window.document.head.appendChild(script);
                /** @type {?} */
                var onLoadFunc = (/**
                 * @return {?}
                 */
                function () {
                    script.removeEventListener('load', onLoadFunc);
                    resolve();
                });
                script.addEventListener('load', onLoadFunc);
                script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');
            }));
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackService.prototype.checkInput = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            if (!obj.key && !this.token) {
                return 'ANGULAR-PAYSTACK: Please insert a your public key';
            }
            if (!obj.email) {
                return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';
            }
            if (!obj.amount) {
                return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';
            }
            if (!obj.ref) {
                return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';
            }
            return '';
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackService.prototype.getPaystackOptions = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            /** @type {?} */
            var paystackOptions = {
                key: obj.key || this.token,
                email: obj.email,
                amount: obj.amount,
                ref: obj.ref,
                metadata: obj.metadata || {},
                currency: obj.currency || 'NGN',
                plan: obj.plan || '',
                channels: obj.channels,
                quantity: obj.quantity || '',
                subaccount: obj.subaccount || '',
                transaction_charge: obj.transaction_charge || 0,
                // tslint:disable-line
                bearer: obj.bearer || '',
            };
            return paystackOptions;
        };
        Angular4PaystackService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        Angular4PaystackService.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [PUBLIC_KEY_TOKEN,] }] }
        ]; };
        /** @nocollapse */ Angular4PaystackService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function Angular4PaystackService_Factory() { return new Angular4PaystackService(core.ɵɵinject(PUBLIC_KEY_TOKEN)); }, token: Angular4PaystackService, providedIn: "root" });
        return Angular4PaystackService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        Angular4PaystackService.prototype.token;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function MyWindow$1() { }
    if (false) {
        /** @type {?} */
        MyWindow$1.prototype.PaystackPop;
    }
    var Angular4PaystackComponent = /** @class */ (function () {
        function Angular4PaystackComponent(paystackService) {
            this.paystackService = paystackService;
            this.paymentInit = new core.EventEmitter();
            this.onClose = new core.EventEmitter(); // tslint:disable-line
            // tslint:disable-line
            this.callback = new core.EventEmitter();
            // tslint:disable-line
            this.isPaying = false;
        }
        /**
         * @return {?}
         */
        Angular4PaystackComponent.prototype.pay = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var errorText, payment;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            errorText = '';
                            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                                errorText = this.valdateInput(this.paystackOptions);
                                this.generateOptions(this.paystackOptions);
                            }
                            else {
                                errorText = this.valdateInput(this);
                                this.generateOptions(this);
                            }
                            if (errorText) {
                                console.error(errorText);
                                return [2 /*return*/, errorText];
                            }
                            return [4 /*yield*/, this.paystackService.loadScript()];
                        case 1:
                            _a.sent();
                            if (this.isPaying) {
                                return [2 /*return*/];
                            }
                            if (this.paymentInit.observers.length) {
                                this.paymentInit.emit();
                            }
                            payment = window.PaystackPop.setup(this._paystackOptions);
                            payment.openIframe();
                            this.isPaying = true;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackComponent.prototype.valdateInput = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            if (!this.callback.observers.length) {
                return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
            }
            return this.paystackService.checkInput(obj);
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackComponent.prototype.generateOptions = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            var _this = this;
            this._paystackOptions = this.paystackService.getPaystackOptions(obj);
            this._paystackOptions.onClose = (/**
             * @return {?}
             */
            function () {
                if (_this.onClose.observers.length) {
                    _this.onClose.emit();
                }
            });
            this._paystackOptions.callback = (/**
             * @param {...?} response
             * @return {?}
             */
            function () {
                var _a;
                var response = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    response[_i] = arguments[_i];
                }
                (_a = _this.callback).emit.apply(_a, __spread(response));
            });
        };
        Angular4PaystackComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'angular4-paystack',
                        template: "<button [ngClass]=\"class\" [ngStyle]=\"style\" (click)=\"pay()\"><ng-content></ng-content></button>"
                    }] }
        ];
        /** @nocollapse */
        Angular4PaystackComponent.ctorParameters = function () { return [
            { type: Angular4PaystackService }
        ]; };
        Angular4PaystackComponent.propDecorators = {
            key: [{ type: core.Input }],
            email: [{ type: core.Input }],
            amount: [{ type: core.Input }],
            metadata: [{ type: core.Input }],
            ref: [{ type: core.Input }],
            currency: [{ type: core.Input }],
            plan: [{ type: core.Input }],
            quantity: [{ type: core.Input }],
            channels: [{ type: core.Input }],
            subaccount: [{ type: core.Input }],
            transaction_charge: [{ type: core.Input }],
            bearer: [{ type: core.Input }],
            class: [{ type: core.Input }],
            style: [{ type: core.Input }],
            paystackOptions: [{ type: core.Input }],
            paymentInit: [{ type: core.Output }],
            onClose: [{ type: core.Output }],
            callback: [{ type: core.Output }]
        };
        return Angular4PaystackComponent;
    }());
    if (false) {
        /** @type {?} */
        Angular4PaystackComponent.prototype.key;
        /** @type {?} */
        Angular4PaystackComponent.prototype.email;
        /** @type {?} */
        Angular4PaystackComponent.prototype.amount;
        /** @type {?} */
        Angular4PaystackComponent.prototype.metadata;
        /** @type {?} */
        Angular4PaystackComponent.prototype.ref;
        /** @type {?} */
        Angular4PaystackComponent.prototype.currency;
        /** @type {?} */
        Angular4PaystackComponent.prototype.plan;
        /** @type {?} */
        Angular4PaystackComponent.prototype.quantity;
        /** @type {?} */
        Angular4PaystackComponent.prototype.channels;
        /** @type {?} */
        Angular4PaystackComponent.prototype.subaccount;
        /** @type {?} */
        Angular4PaystackComponent.prototype.transaction_charge;
        /** @type {?} */
        Angular4PaystackComponent.prototype.bearer;
        /** @type {?} */
        Angular4PaystackComponent.prototype.class;
        /** @type {?} */
        Angular4PaystackComponent.prototype.style;
        /** @type {?} */
        Angular4PaystackComponent.prototype.paystackOptions;
        /** @type {?} */
        Angular4PaystackComponent.prototype.paymentInit;
        /** @type {?} */
        Angular4PaystackComponent.prototype.onClose;
        /** @type {?} */
        Angular4PaystackComponent.prototype.callback;
        /** @type {?} */
        Angular4PaystackComponent.prototype._paystackOptions;
        /**
         * @type {?}
         * @private
         */
        Angular4PaystackComponent.prototype.isPaying;
        /**
         * @type {?}
         * @private
         */
        Angular4PaystackComponent.prototype.paystackService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function MyWindow$2() { }
    if (false) {
        /** @type {?} */
        MyWindow$2.prototype.PaystackPop;
    }
    var Angular4PaystackDirective = /** @class */ (function () {
        function Angular4PaystackDirective(paystackService) {
            this.paystackService = paystackService;
            this.paymentInit = new core.EventEmitter(); // tslint:disable-line
            // tslint:disable-line
            this.onClose = new core.EventEmitter(); // tslint:disable-line
            // tslint:disable-line
            this.callback = new core.EventEmitter();
            // tslint:disable-line
            this.isPaying = false;
        }
        /**
         * @return {?}
         */
        Angular4PaystackDirective.prototype.pay = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var errorText, payment;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            errorText = '';
                            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                                errorText = this.valdateInput(this.paystackOptions);
                                this.generateOptions(this.paystackOptions);
                            }
                            else {
                                errorText = this.valdateInput(this);
                                this.generateOptions(this);
                            }
                            if (errorText) {
                                console.error(errorText);
                                return [2 /*return*/, errorText];
                            }
                            return [4 /*yield*/, this.paystackService.loadScript()];
                        case 1:
                            _a.sent();
                            if (this.isPaying) {
                                return [2 /*return*/];
                            }
                            if (this.paymentInit.observers.length) {
                                this.paymentInit.emit();
                            }
                            payment = window.PaystackPop.setup(this._paystackOptions);
                            payment.openIframe();
                            this.isPaying = true;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackDirective.prototype.valdateInput = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            if (!this.callback.observers.length) {
                return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
            }
            return this.paystackService.checkInput(obj);
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackDirective.prototype.generateOptions = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            var _this = this;
            this._paystackOptions = this.paystackService.getPaystackOptions(obj);
            this._paystackOptions.onClose = (/**
             * @return {?}
             */
            function () {
                if (_this.onClose.observers.length) {
                    _this.onClose.emit();
                }
            });
            this._paystackOptions.callback = (/**
             * @param {...?} response
             * @return {?}
             */
            function () {
                var _a;
                var response = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    response[_i] = arguments[_i];
                }
                (_a = _this.callback).emit.apply(_a, __spread(response));
            });
        };
        /**
         * @return {?}
         */
        Angular4PaystackDirective.prototype.buttonClick = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.pay();
                    return [2 /*return*/];
                });
            });
        };
        Angular4PaystackDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[angular4-paystack]',
                    },] }
        ];
        /** @nocollapse */
        Angular4PaystackDirective.ctorParameters = function () { return [
            { type: Angular4PaystackService }
        ]; };
        Angular4PaystackDirective.propDecorators = {
            key: [{ type: core.Input }],
            email: [{ type: core.Input }],
            amount: [{ type: core.Input }],
            metadata: [{ type: core.Input }],
            ref: [{ type: core.Input }],
            currency: [{ type: core.Input }],
            plan: [{ type: core.Input }],
            quantity: [{ type: core.Input }],
            subaccount: [{ type: core.Input }],
            channels: [{ type: core.Input }],
            transaction_charge: [{ type: core.Input }],
            bearer: [{ type: core.Input }],
            class: [{ type: core.Input }],
            style: [{ type: core.Input }],
            paystackOptions: [{ type: core.Input }],
            paymentInit: [{ type: core.Output }],
            onClose: [{ type: core.Output }],
            callback: [{ type: core.Output }],
            buttonClick: [{ type: core.HostListener, args: ['click',] }]
        };
        return Angular4PaystackDirective;
    }());
    if (false) {
        /** @type {?} */
        Angular4PaystackDirective.prototype.key;
        /** @type {?} */
        Angular4PaystackDirective.prototype.email;
        /** @type {?} */
        Angular4PaystackDirective.prototype.amount;
        /** @type {?} */
        Angular4PaystackDirective.prototype.metadata;
        /** @type {?} */
        Angular4PaystackDirective.prototype.ref;
        /** @type {?} */
        Angular4PaystackDirective.prototype.currency;
        /** @type {?} */
        Angular4PaystackDirective.prototype.plan;
        /** @type {?} */
        Angular4PaystackDirective.prototype.quantity;
        /** @type {?} */
        Angular4PaystackDirective.prototype.subaccount;
        /** @type {?} */
        Angular4PaystackDirective.prototype.channels;
        /** @type {?} */
        Angular4PaystackDirective.prototype.transaction_charge;
        /** @type {?} */
        Angular4PaystackDirective.prototype.bearer;
        /** @type {?} */
        Angular4PaystackDirective.prototype.class;
        /** @type {?} */
        Angular4PaystackDirective.prototype.style;
        /** @type {?} */
        Angular4PaystackDirective.prototype.paystackOptions;
        /** @type {?} */
        Angular4PaystackDirective.prototype.paymentInit;
        /** @type {?} */
        Angular4PaystackDirective.prototype.onClose;
        /** @type {?} */
        Angular4PaystackDirective.prototype.callback;
        /**
         * @type {?}
         * @private
         */
        Angular4PaystackDirective.prototype._paystackOptions;
        /**
         * @type {?}
         * @private
         */
        Angular4PaystackDirective.prototype.isPaying;
        /**
         * @type {?}
         * @private
         */
        Angular4PaystackDirective.prototype.paystackService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function MyWindow$3() { }
    if (false) {
        /** @type {?} */
        MyWindow$3.prototype.PaystackPop;
    }
    var Angular4PaystackEmbedComponent = /** @class */ (function () {
        function Angular4PaystackEmbedComponent(paystackService) {
            this.paystackService = paystackService;
            this.paymentInit = new core.EventEmitter();
            this.onClose = new core.EventEmitter(); // tslint:disable-line
            // tslint:disable-line
            this.callback = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        Angular4PaystackEmbedComponent.prototype.pay = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var errorText, payment;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            errorText = '';
                            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                                errorText = this.valdateInput(this.paystackOptions);
                                this.generateOptions(this.paystackOptions);
                            }
                            else {
                                errorText = this.valdateInput(this);
                                this.generateOptions(this);
                            }
                            if (errorText) {
                                console.error(errorText);
                                return [2 /*return*/, errorText];
                            }
                            return [4 /*yield*/, this.paystackService.loadScript()];
                        case 1:
                            _a.sent();
                            if (this.paymentInit.observers.length) {
                                this.paymentInit.emit();
                            }
                            payment = window.PaystackPop.setup(this._paystackOptions);
                            payment.openIframe();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackEmbedComponent.prototype.valdateInput = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            if (!this.callback.observers.length) {
                return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
            }
            return this.paystackService.checkInput(obj);
        };
        /**
         * @param {?} obj
         * @return {?}
         */
        Angular4PaystackEmbedComponent.prototype.generateOptions = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            var _this = this;
            this._paystackOptions = this.paystackService.getPaystackOptions(obj);
            this._paystackOptions.onClose = (/**
             * @return {?}
             */
            function () {
                if (_this.onClose.observers.length) {
                    _this.onClose.emit();
                }
            });
            this._paystackOptions.callback = (/**
             * @param {...?} response
             * @return {?}
             */
            function () {
                var _a;
                var response = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    response[_i] = arguments[_i];
                }
                (_a = _this.callback).emit.apply(_a, __spread(response));
            });
        };
        /**
         * @return {?}
         */
        Angular4PaystackEmbedComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    console.error('ANGULAR-PAYSTACK: The paystack embed option is deprecated. Please use the paystack component or directive');
                    this.pay();
                    return [2 /*return*/];
                });
            });
        };
        Angular4PaystackEmbedComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'angular4-paystack-embed',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "<div id=\"paystackEmbedContainer\"></div>"
                    }] }
        ];
        /** @nocollapse */
        Angular4PaystackEmbedComponent.ctorParameters = function () { return [
            { type: Angular4PaystackService }
        ]; };
        Angular4PaystackEmbedComponent.propDecorators = {
            key: [{ type: core.Input }],
            email: [{ type: core.Input }],
            amount: [{ type: core.Input }],
            metadata: [{ type: core.Input }],
            channels: [{ type: core.Input }],
            ref: [{ type: core.Input }],
            currency: [{ type: core.Input }],
            plan: [{ type: core.Input }],
            quantity: [{ type: core.Input }],
            subaccount: [{ type: core.Input }],
            transaction_charge: [{ type: core.Input }],
            bearer: [{ type: core.Input }],
            paystackOptions: [{ type: core.Input }],
            paymentInit: [{ type: core.Output }],
            onClose: [{ type: core.Output }],
            callback: [{ type: core.Output }]
        };
        return Angular4PaystackEmbedComponent;
    }());
    if (false) {
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.key;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.email;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.amount;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.metadata;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.channels;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.ref;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.currency;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.plan;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.quantity;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.subaccount;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.transaction_charge;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.bearer;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.paystackOptions;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.paymentInit;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.onClose;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype.callback;
        /** @type {?} */
        Angular4PaystackEmbedComponent.prototype._paystackOptions;
        /**
         * @type {?}
         * @private
         */
        Angular4PaystackEmbedComponent.prototype.paystackService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Angular4PaystackModule = /** @class */ (function () {
        function Angular4PaystackModule() {
        }
        /**
         * @param {?} token
         * @return {?}
         */
        Angular4PaystackModule.forRoot = /**
         * @param {?} token
         * @return {?}
         */
        function (token) {
            return {
                ngModule: Angular4PaystackModule,
                providers: [
                    Angular4PaystackService,
                    { provide: PUBLIC_KEY_TOKEN, useValue: token }
                ]
            };
        };
        Angular4PaystackModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [Angular4PaystackComponent, Angular4PaystackDirective, Angular4PaystackEmbedComponent],
                        declarations: [Angular4PaystackComponent, Angular4PaystackDirective, Angular4PaystackEmbedComponent],
                        providers: [],
                    },] }
        ];
        return Angular4PaystackModule;
    }());

    exports.Angular4PaystackComponent = Angular4PaystackComponent;
    exports.Angular4PaystackDirective = Angular4PaystackDirective;
    exports.Angular4PaystackEmbedComponent = Angular4PaystackEmbedComponent;
    exports.Angular4PaystackModule = Angular4PaystackModule;
    exports.ɵa = Angular4PaystackService;
    exports.ɵb = PUBLIC_KEY_TOKEN;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular4-paystack.umd.js.map
